


CREATE TABLE rt_VideoTranscribtion (
  id 			BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  bloggerID 		BIGINT REFERENCES rt_Bloggers(id) ON DELETE RESTRICT,
  channelID 		BIGINT REFERENCES rt_Channels(id) ON DELETE RESTRICT,
  channelVideoID 	BIGINT,
  description 		TEXT,
  hashtags 		TEXT,
  title 		TEXT,
  url 			TEXT,
  text 			TEXT,
  is_vectorized 	BOOLEAN DEFAULT FALSE,
  created_at 		TIMESTAMPTZ DEFAULT NOW(),
  changed_at 		TIMESTAMPTZ DEFAULT NOW()
);

rt_track_instagram_adapter_changes
transcrib_insta
	id
	author
	Video_Url
	shortcode


rt_track_tiktok_adapter_changes
Transcrib_TikTok
	id
	video_url

rt_track_youtube2_adapter_changes
"YouTube Transcrib"
	id
	Title



#This is one looks like valid

rt_track_youtube_adapter_changes
youtube
	internal_id
	title
	description
	hashtags

	views
	likes
	comments_count
	
	channel_url
	channel_id
	channel_description
	channel_subscribers
	channel_videos_count
	channel_total_views
	

instagram_posts
	url			<---
	caption
	owner_full_name
	comments_count
	likes_count


instagram_content
	video_url
	shortcode               <---
	client_internal_id
	profile_url
	caption
	likes
	views
	videoPlayCount
	commentsCounts
	
	

SELECT T1.*
FROM instagram_posts T1
INNER JOIN transkrib_insta T2 ON T1.url = T2."Video_Url"


SELECT T1.*
FROM instagram_content T1
INNER JOIN transkrib_insta T2 ON T1.shortcode = T2."shortcode"



tiktok
	web_video_url
	text - ?
	author_id
	author_name
	author_nickname
	author_profile_url
	hashtags
	Transcrib

SELECT T1.*

FROM tiktok T1
INNER JOIN "Transkrib_TikTok" T2 ON T1.web_video_url = T2.video_url



SELECT table_name 
FROM information_schema.tables 
WHERE table_name ILIKE '%tiktok%' AND table_schema = 'public';


SELECT * 
FROM information_schema.columns where 
table_name ILIKE '%tiktok%' AND table_schema = 'public';


SELECT * 
FROM information_schema.columns where 
table_name ILIKE '%youtube%' AND table_schema = 'public';




#Revision:

youtube










CREATE OR REPLACE FUNCTION  rt_track_instagram_adapter_changes()
RETURNS TRIGGER AS $$
DECLARE
  existed BOOLEAN;
  channel BIGINT;
BEGIN
  channel=3;
  IF TG_OP = 'INSERT' THEN
    INSERT INTO rt_VideoTranscribtion (bloggerID, channelID, channelVideoID, url, title, description, hashtags, text) 
        VALUES (1, channel, NEW.id, NEW."Video_Url", '', '', '', NEW."Text");
    RETURN NEW;
  END IF;
  IF TG_OP = 'UPDATE' THEN
   SELECT EXISTS (SELECT 1 FROM rt_VideoTranscribtion WHERE channelid=channel AND channelVideoID = NEW.id) INTO existed;
     IF existed THEN
        UPDATE 
        rt_VideoTranscribtion SET url=NEW."Video_Url", text=NEW."Text", is_vectorized=false,changed_at=NOW() WHERE channelVideoID=NEW.id AND channelid=channel;
      ELSE
        INSERT INTO rt_VideoTranscribtion (bloggerID, channelID, channelVideoID, url, title, description, hashtags, text) 
        VALUES (1, channel, NEW.id, NEW."Video_Url", '', '', '', NEW."Text");
     END IF;
    RETURN NEW;
  END IF;
  RETURN NULL; -- Add this to handle other cases
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION  rt_track_tiktok_adapter_changes()
RETURNS TRIGGER AS $$
DECLARE
  existed BOOLEAN;
  channel BIGINT;
BEGIN
  channel=2;

  IF TG_OP = 'INSERT' THEN
    INSERT INTO rt_VideoTranscribtion (bloggerID, channelID, channelVideoID, url, title, description, hashtags, text) 
    VALUES (1, channel, NEW.id, NEW."video_url", '', '', '', NEW."text");
    RETURN NEW;
  END IF;
  IF TG_OP = 'UPDATE' THEN
   SELECT EXISTS (SELECT 1 FROM rt_VideoTranscribtion WHERE channelid=channel AND channelVideoID = NEW.id) INTO existed;
     IF existed THEN
        UPDATE 
        rt_VideoTranscribtion SET url=NEW."video_url", text=NEW."text", is_vectorized=false,changed_at=NOW() WHERE channelVideoID=NEW.id AND channelid=channel;
      ELSE
	  INSERT INTO rt_VideoTranscribtion (bloggerID, channelID, channelVideoID, url, title, description, hashtags, text) 
    	  VALUES (1, channel, NEW.id, NEW."video_url", '', '', '', NEW."text");
      
      END IF;
    RETURN NEW;
  END IF;
  RETURN NULL; -- Add this to handle other cases
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION  rt_track_youtube2_adapter_changes()
RETURNS TRIGGER AS $$
DECLARE
  existed BOOLEAN;
  channel BIGINT;
BEGIN
  channel=1;

  IF TG_OP = 'INSERT' THEN
    INSERT INTO rt_VideoTranscribtion (bloggerID, channelID, channelVideoID, url, title, description, hashtags, text) 
    VALUES (1, channel, NEW.internal_id, NEW."URL_video", '', '', '', NEW."Text");
    RETURN NEW;
  END IF;
  IF TG_OP = 'UPDATE' THEN

   SELECT EXISTS (SELECT 1 FROM rt_VideoTranscribtion WHERE channelid=channel AND channelVideoID = NEW.id) INTO existed;

     IF existed THEN
        UPDATE 
        rt_VideoTranscribtion SET url=NEW."URL_video", text=NEW."Text", is_vectorized=false,changed_at=NOW() WHERE channelVideoID=NEW.id AND channelid=channel;
      ELSE

    	INSERT INTO rt_VideoTranscribtion (bloggerID, channelID, channelVideoID, url, title, description, hashtags, text) 
    	VALUES (1, channel, NEW.internal_id, NEW."URL_video", '', '', '', NEW."Text");

      END IF;
    RETURN NEW;
  END IF;
  RETURN NULL; -- Add this to handle other cases
END;
$$ LANGUAGE plpgsql;




CREATE OR REPLACE FUNCTION  rt_track_youtube_adapter_changes()
RETURNS TRIGGER AS $$
DECLARE
  existed BOOLEAN;
  channel BIGINT;

BEGIN
   channel=1;

   IF TG_OP = 'INSERT' THEN
    INSERT INTO rt_VideoTranscribtion (bloggerID, channelID, channelVideoID, url, title, description, hashtags, text) 
    VALUES (1, channel, NEW.internal_id, NEW.url, NEW.title, NEW.description, NEW.hashtags, NEW."Transcrib");
    RETURN NEW;
   ELSIF TG_OP = 'UPDATE' THEN
   SELECT EXISTS (SELECT 1 FROM rt_VideoTranscribtion WHERE channelid=channel AND channelVideoID = NEW.internal_id) INTO existed;

   IF existed THEN
      	 UPDATE 
       	 rt_VideoTranscribtion SET url=NEW.url, text=NEW."Transcrib", title=NEW.title, description=NEW.description,
       	 is_vectorized=false, changed_at=NOW() WHERE channelVideoID=NEW.internal_id AND channelid=channel;
     	ELSE
	    INSERT INTO rt_VideoTranscribtion (bloggerID, channelID, channelVideoID, url, title, description, hashtags, text) 
    		VALUES (1, channel, NEW.internal_id, NEW.url, NEW.title, NEW.description, NEW.hashtags, NEW."Transcrib");
     
     END IF;
     RETURN NEW;
  END IF;
  RETURN NULL;
END;
$$ LANGUAGE plpgsql;




