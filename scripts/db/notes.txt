
select * from instagram_content


where shortcode = 'DLSP3yRiuxb'

select * from transkrib_insta 
where Text != '??????'

where shortcode='DMiCaFVNM-u'

select * from instagram_content where shortcode='DMiCaFVNM-u'



select * from transkrib_insta where transkrib_insta."Text" != '??????'



SELECT  DISTINCT T2.*, T1.*
FROM instagram_content T1
INNER JOIN transkrib_insta T2 ON T1.shortcode = T2.shortcode

SELECT T1.*
FROM instagram_content T1
INNER JOIN transkrib_insta T2 ON T1."video_url" = T2."Video_Url"


SELECT T2.*
FROM instagram_content T1
RIGHT JOIN transkrib_insta T2 ON T1.shortcode = T2.shortcode


select * from instagram_content

select * from transkrib_insta

select * from instagram_posts

create policy "Enable read access for Authenticated users for transkrib_insta table"
on "public"."transkrib_insta"
as PERMISSIVE
for SELECT
to authenticated
using (true)


create policy "Enable read access for Authenticated users for rizz_blogger table"
on "public"."rizz_blogger"
as PERMISSIVE
for SELECT
to anon, authenticated
using (true)

create policy "Enable read access for Authenticated users for Transkrib_TikTok table"
on "public"."Transkrib_TikTok"
as PERMISSIVE
for SELECT
to anon, authenticated
using (true)

create policy "Enable read access for Authenticated users for tiktok table"
on "public"."tiktok"
as PERMISSIVE
for SELECT
to anon, authenticated
using (true)


create policy "Enable read access for Authenticated users for YouTube Transkrib table"
on "public"."YouTube Transkrib"
as PERMISSIVE
for SELECT
to anon, authenticated
using (true)


create policy "Enable read access for Authenticated users for wjbloggers table"
on "public"."wjbloggers"
as PERMISSIVE
for SELECT
to anon, authenticated
using (true)



CREATE TABLE rt_Bloggers (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  email TEXT UNIQUE NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

INSERT INTO rt_Bloggers (name, email) 
VALUES ('Anton Sumin', 'apsumin@gmail.com');

select * from rt_Bloggers

CREATE TABLE rt_Subscribers (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  email TEXT UNIQUE NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

INSERT INTO rt_Subscribers (name, email) 
VALUES ('Anton Sumin', 'apsumin@gmail.com');


CREATE TABLE rt_Channels (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

INSERT INTO rt_Channels (name) 
VALUES ('YouTube');

INSERT INTO rt_Channels (name) 
VALUES ('TikTok');

INSERT INTO rt_Channels (name) 
VALUES ('Instagram');

select * from  rt_Channels

CREATE TABLE rt_Subscriptions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  bloggerID BIGINT REFERENCES rt_Bloggers(id) ON DELETE RESTRICT,
  subscriberID BIGINT REFERENCES rt_Subscribers(id) ON DELETE RESTRICT,
  channelID BIGINT REFERENCES rt_Channels(id) ON DELETE RESTRICT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

select * from rt_Subscriptions

INSERT INTO rt_Subscriptions (bloggerID, subscriberID, channelID) 
VALUES (1, 1, 1);

CREATE TABLE rt_VideoTranscribtion (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  bloggerID BIGINT REFERENCES rt_Bloggers(id) ON DELETE RESTRICT,
  channelID BIGINT REFERENCES rt_Channels(id) ON DELETE RESTRICT,
  channelVideoID TEXT,
  description TEXT,
  hashtags TEXT,
  title TEXT,
  url TEXT,
  text TEXT,
  is_vectorized BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  changed_at TIMESTAMPTZ DEFAULT NOW()
);

select * from rt_VideoTranscribtion

INSERT INTO rt_VideoTranscribtion (bloggerID, channelID, text) 
VALUES (1, 1, 'test');


drop table rt_VideoTranscribtion
drop table Subscriptions;
drop table Channels;
drop table subscribers;
drop table Bloggers;


select * from youtube




-- Create trigger function
CREATE OR REPLACE FUNCTION rt_track_youtube_adapter_changes()
RETURNS TRIGGER AS $$
DECLARE
  existed BOOLEAN;

BEGIN

   IF TG_OP = 'INSERT' THEN
    INSERT INTO rt_VideoTranscribtion (bloggerID, channelID, channelVideoID, url, title, description, hashtags, text) 
    VALUES (1, 1, NEW.video_id, NEW.url, NEW.title, NEW.description, NEW.hashtags, NEW.text);
    RETURN NEW;
  ELSIF TG_OP = 'UPDATE' THEN
     SELECT EXISTS (SELECT 1 FROM rt_VideoTranscribtion WHERE channelVideoID = NEW.video_id) INTO existed;
     IF existed THEN
       UPDATE 
       rt_VideoTranscribtion SET url=NEW.url, text=NEW.text, title=NEW.title, description=NEW.description,
       channelVideoID=NEW.video_id, changed_at=NOW() WHERE channelVideoID=OLD.video_id;
     ELSE
       INSERT INTO rt_VideoTranscribtion (bloggerID, channelID, channelVideoID, url, title, description, hashtags, text) 
       VALUES (1, 1, NEW.video_id, NEW.url, NEW.title, NEW.description, NEW.hashtags, NEW.text);
     
     END IF;
     RETURN NEW;
  END IF;
  RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- Create trigger
CREATE TRIGGER rt_trigger_youtube_adapter_changes
AFTER INSERT OR UPDATE ON youtube
FOR EACH ROW
EXECUTE FUNCTION rt_track_youtube_adapter_changes();

select text from rt_VideoTranscribtion
select * from rt_VideoTranscribtion order by id

DELETE FROM rt_VideoTranscribtion
update youtube set description='TEST' where internal_id=64

update youtube set description='TEST' where internal_id=73

update youtube where internal_id=73

update youtube set webhook_id = NULL


SELECT * FROM youtube

select * from transkrib_insta

-- Generate markdown table documentation
SELECT 
    '| ' || column_name || ' | ' || data_type || ' | ' || is_nullable || ' | ' || COALESCE(column_default, '') || ' |'
FROM information_schema.columns
WHERE table_name = 'Transkrib_TikTok'
ORDER BY ordinal_position;

select * from rt_channels

update transkrib_insta set changed_at=NOW()
update transkrib_insta set changed_at=NULL

-- Create trigger function
CREATE OR REPLACE FUNCTION rt_track_instagram_adapter_changes()
RETURNS TRIGGER AS $$
DECLARE
  existed BOOLEAN;
BEGIN
  IF TG_OP = 'INSERT' THEN
    INSERT INTO rt_VideoTranscribtion (bloggerID, channelID, channelVideoID, url, title, description, hashtags, text) 
        VALUES (1, 3, NEW.shortcode, NEW."Video_Url", '', '', '', NEW."Text");
    RETURN NEW;
  END IF;
  IF TG_OP = 'UPDATE' THEN
   SELECT EXISTS (SELECT 1 FROM rt_VideoTranscribtion WHERE channelVideoID = NEW.shortcode) INTO existed;
     IF existed THEN
        UPDATE 
        rt_VideoTranscribtion SET url=NEW."Video_Url", text=NEW."Text", channelVideoID=NEW.shortcode, changed_at=NOW() WHERE channelVideoID=OLD.shortcode;
      ELSE
        INSERT INTO rt_VideoTranscribtion (bloggerID, channelID, channelVideoID, url, title, description, hashtags, text) 
        VALUES (1, 3, NEW.shortcode, NEW."Video_Url", '', '', '', NEW."Text");
     END IF;
    RETURN NEW;
  END IF;
  RETURN NULL; -- Add this to handle other cases
END;
$$ LANGUAGE plpgsql;


select * from rt_VideoTranscribtion

-- Create trigger

CREATE TRIGGER rt_trigger_instagram_adapter_changes
AFTER INSERT OR UPDATE ON transkrib_insta
FOR EACH ROW
EXECUTE FUNCTION rt_track_instagram_adapter_changes();


ALTER TABLE transkrib_insta
ADD COLUMN changed_at TIMESTAMP;


CREATE OR REPLACE FUNCTION rt_track_tiktok_adapter_changes()
RETURNS TRIGGER AS $$
DECLARE
  existed BOOLEAN;
BEGIN
  IF TG_OP = 'INSERT' THEN
    INSERT INTO rt_VideoTranscribtion (bloggerID, channelID, channelVideoID, url, title, description, hashtags, text) 
    VALUES (1, 2, NEW."video_url", NEW."video_url", '', '', '', NEW."text");
    RETURN NEW;
  END IF;
  IF TG_OP = 'UPDATE' THEN
   SELECT EXISTS (SELECT 1 FROM rt_VideoTranscribtion WHERE channelVideoID = OLD."video_url") INTO existed;
     IF existed THEN
        UPDATE 
        rt_VideoTranscribtion SET channelVideoID= NEW."video_url", url=NEW."video_url", text=NEW."text", changed_at=NOW() WHERE channelVideoID=OLD."video_url";
      ELSE
    	INSERT INTO rt_VideoTranscribtion (bloggerID, channelID, channelVideoID, url, title, description, hashtags, text) 
      VALUES (1, 2, NEW."video_url", NEW."video_url", '', '', '', NEW."text");
      
      END IF;
    RETURN NEW;
  END IF;
  RETURN NULL; -- Add this to handle other cases
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER rt_trigger_tiktok_adapter_changes
AFTER INSERT OR UPDATE ON "Transkrib_TikTok"
FOR EACH ROW
EXECUTE FUNCTION rt_track_tiktok_adapter_changes();

select * from "Transkrib_TikTok"

update "Transkrib_TikTok" set text=NULL;
update transkrib_insta set changed_at=NOW();
update youtube set webhook_id = NULL;

select * from rt_VideoTranscribtion



CREATE OR REPLACE FUNCTION rt_track_youtube2_adapter_changes()
RETURNS TRIGGER AS $$
DECLARE
  existed BOOLEAN;
BEGIN
  IF TG_OP = 'INSERT' THEN
    INSERT INTO rt_VideoTranscribtion (bloggerID, channelID, channelVideoID, url, title, description, hashtags, text) 
    VALUES (1, 1, NEW."URL_video", NEW."URL_video", '', '', '', NEW."Text");
    RETURN NEW;
  END IF;
  IF TG_OP = 'UPDATE' THEN
   SELECT EXISTS (SELECT 1 FROM rt_VideoTranscribtion WHERE channelVideoID = OLD."URL_video") INTO existed;
     IF existed THEN
        UPDATE 
        rt_VideoTranscribtion SET channelVideoID= NEW."URL_video", url=NEW."URL_video", text=NEW."Text", is_vectorized=false,changed_at=NOW() WHERE channelVideoID=OLD."URL_video";
      ELSE
        INSERT INTO rt_VideoTranscribtion (bloggerID, channelID, channelVideoID, url, title, description, hashtags, text) 
        VALUES (1, 1, NEW."URL_video", NEW."URL_video", '', '', '', NEW."Text");
      END IF;
    RETURN NEW;
  END IF;
  RETURN NULL; -- Add this to handle other cases
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER rt_trigger_youtube2_adapter_changes
AFTER INSERT OR UPDATE ON "YouTube Transkrib"
FOR EACH ROW
EXECUTE FUNCTION rt_track_youtube2_adapter_changes();

























instagram_content
instagram_posts
transcrib_insta

 SELECT json_agg(
        json_build_object(
            'table_name', c.table_name,
            'column_name', c.column_name,
            'data_type', c.data_type,
            'is_nullable', c.is_nullable,
            'column_default', c.column_default
        )
    ) AS table_structure
    FROM information_schema.columns c
    WHERE c.table_schema = 'public' -- or your specific schema
    AND c.table_name = 'instagram_content';



[{"table_name":"instagram_content","column_name":"id","data_type":"uuid","is_nullable":"NO","column_default":"gen_random_uuid()"},{"table_name":"instagram_content","column_name":"client_internal_id","data_type":"text","is_nullable":"YES","column_default":null},{"table_name":"instagram_content","column_name":"profile_url","data_type":"text","is_nullable":"YES","column_default":null},{"table_name":"instagram_content","column_name":"instagram_post_id","data_type":"text","is_nullable":"YES","column_default":null},{"table_name":"instagram_content","column_name":"shortcode","data_type":"text","is_nullable":"YES","column_default":null},{"table_name":"instagram_content","column_name":"video_url","data_type":"text","is_nullable":"YES","column_default":null},{"table_name":"instagram_content","column_name":"caption","data_type":"text","is_nullable":"YES","column_default":null},{"table_name":"instagram_content","column_name":"likes","data_type":"numeric","is_nullable":"YES","column_default":null},{"table_name":"instagram_content","column_name":"views","data_type":"numeric","is_nullable":"YES","column_default":null},{"table_name":"instagram_content","column_name":"video_duration","data_type":"double precision","is_nullable":"YES","column_default":null},{"table_name":"instagram_content","column_name":"created_at","data_type":"timestamp without time zone","is_nullable":"YES","column_default":"now()"},{"table_name":"instagram_content","column_name":"videoPlayCount","data_type":"numeric","is_nullable":"YES","column_default":null},{"table_name":"instagram_content","column_name":"commentsCounts","data_type":"numeric","is_nullable":"YES","column_default":null},{"table_name":"instagram_content","column_name":"?????? ??????","data_type":"text","is_nullable":"YES","column_default":null},{"table_name":"instagram_content","column_name":"????????? ???????","data_type":"text","is_nullable":"YES","column_default":null},{"table_name":"instagram_content","column_name":"is_summary","data_type":"text","is_nullable":"YES","column_default":null}]


SELECT T1.*
FROM instagram_content T1
INNER JOIN transkrib_insta T2 ON T1.shortcode = T2.shortcode



SELECT T1.*
FROM instagram_content T1
INNER JOIN transkrib_insta T2 ON T1."video_url" = T2."Video_Url"


select * from instagram_content
where shortcode = 'DLSP3yRiuxb'

select * from transkrib_insta 
where Text != '??????'

where shortcode='DMiCaFVNM-u'

select * from instagram_content where shortcode='DMiCaFVNM-u'



select * from transkrib_insta where transkrib_insta."Text" != '??????'



SELECT  DISTINCT T2.*, T1.*
FROM instagram_content T1
INNER JOIN transkrib_insta T2 ON T1.shortcode = T2.shortcode

SELECT T1.*
FROM instagram_content T1
INNER JOIN transkrib_insta T2 ON T1."video_url" = T2."Video_Url"


SELECT T2.*
FROM instagram_content T1
RIGHT JOIN transkrib_insta T2 ON T1.shortcode = T2.shortcode


select * from instagram_content

select * from transkrib_insta

select * from instagram_posts

create policy "Enable read access for Authenticated users for transkrib_insta table"
on "public"."transkrib_insta"
as PERMISSIVE
for SELECT
to authenticated
using (true)


create policy "Enable read access for Authenticated users for rizz_blogger table"
on "public"."rizz_blogger"
as PERMISSIVE
for SELECT
to anon, authenticated
using (true)

create policy "Enable read access for Authenticated users for Transkrib_TikTok table"
on "public"."Transkrib_TikTok"
as PERMISSIVE
for SELECT
to anon, authenticated
using (true)

create policy "Enable read access for Authenticated users for tiktok table"
on "public"."tiktok"
as PERMISSIVE
for SELECT
to anon, authenticated
using (true)


create policy "Enable read access for Authenticated users for YouTube Transkrib table"
on "public"."YouTube Transkrib"
as PERMISSIVE
for SELECT
to anon, authenticated
using (true)


create policy "Enable read access for Authenticated users for wjbloggers table"
on "public"."wjbloggers"
as PERMISSIVE
for SELECT
to anon, authenticated
using (true)



CREATE TABLE rt_Users (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  email TEXT UNIQUE NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

INSERT INTO rt_Users(name, email) 
VALUES ('Anton Sumin', 'apsumin@gmail.com');



CREATE TABLE rt_Bloggers (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  email TEXT UNIQUE NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

INSERT INTO rt_Bloggers (name, email) 
VALUES ('Anton Sumin', 'apsumin@gmail.com');

select * from rt_Bloggers

CREATE TABLE rt_Subscribers (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  email TEXT UNIQUE NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

INSERT INTO rt_Subscribers (name, email) 
VALUES ('Anton Sumin', 'apsumin@gmail.com');


CREATE TABLE rt_Channels (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

INSERT INTO rt_Channels (name) 
VALUES ('YouTube');

INSERT INTO rt_Channels (name) 
VALUES ('TikTok');

INSERT INTO rt_Channels (name) 
VALUES ('Instagram');

select * from  rt_Channels

CREATE TABLE rt_Subscriptions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  bloggerID BIGINT REFERENCES rt_Bloggers(id) ON DELETE RESTRICT,
  subscriberID BIGINT REFERENCES rt_Subscribers(id) ON DELETE RESTRICT,
  channelID BIGINT REFERENCES rt_Channels(id) ON DELETE RESTRICT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

select * from rt_Subscriptions

INSERT INTO rt_Subscriptions (bloggerID, subscriberID, channelID) 
VALUES (1, 1, 1);

CREATE TABLE rt_VideoTranscribtion (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  bloggerID BIGINT REFERENCES rt_Bloggers(id) ON DELETE RESTRICT,
  channelID BIGINT REFERENCES rt_Channels(id) ON DELETE RESTRICT,
  channelVideoID TEXT,
  title TEXT,
  url TEXT,
  text TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  changed_at TIMESTAMPTZ DEFAULT NOW()
);

select * from rt_VideoTranscribtion

INSERT INTO rt_VideoTranscribtion (bloggerID, channelID, text) 
VALUES (1, 1, 'test');


drop table rt_VideoTranscribtion
drop table Subscriptions;
drop table Channels;
drop table subscribers;
drop table Bloggers;







-- Create trigger function
CREATE OR REPLACE FUNCTION rt_track_youtube_adapter_changes()
RETURNS TRIGGER AS $$
DECLARE
  existed BOOLEAN;

BEGIN

   IF TG_OP = 'INSERT' THEN
    INSERT INTO rt_VideoTranscribtion (bloggerID, channelID, channelVideoID, url, text) 
    VALUES (1, 1, NEW.video_id, NEW.url, NEW.text);
    RETURN NEW;
  ELSIF TG_OP = 'UPDATE' THEN
     SELECT EXISTS (SELECT 1 FROM rt_VideoTranscribtion WHERE channelVideoID = NEW.video_id) INTO existed;
     IF existed THEN
       UPDATE 
       rt_VideoTranscribtion SET url=NEW.url, text=NEW.text, 
       channelVideoID=NEW.video_id, changed_at=NOW() WHERE channelVideoID=OLD.video_id;
     ELSE
       INSERT INTO rt_VideoTranscribtion (bloggerID, channelID, channelVideoID, url, text) 
       VALUES (1, 1, NEW.video_id, NEW.url, NEW.text);
     END IF;
     RETURN NEW;
  END IF;
  RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- Create trigger
CREATE TRIGGER rt_trigger_youtube_adapter_changes
AFTER INSERT OR UPDATE ON youtube
FOR EACH ROW
EXECUTE FUNCTION rt_track_youtube_adapter_changes();

select text from rt_VideoTranscribtion

DELETE FROM rt_VideoTranscribtion
update youtube set description='TEST' where internal_id=64

update youtube set description='TEST' where internal_id=73


-- Generate markdown table documentation
SELECT 
    '| ' || column_name || ' | ' || data_type || ' | ' || is_nullable || ' | ' || COALESCE(column_default, '') || ' |'
FROM information_schema.columns
WHERE table_name = 'youtube'
ORDER BY ordinal_position;


















select * from instagram_content
where shortcode = 'DLSP3yRiuxb'

select * from transkrib_insta 
where Text != '??????'

where shortcode='DMiCaFVNM-u'

select * from instagram_content where shortcode='DMiCaFVNM-u'



select * from transkrib_insta where transkrib_insta."Text" != '??????'



SELECT  DISTINCT T2.*, T1.*
FROM instagram_content T1
INNER JOIN transkrib_insta T2 ON T1.shortcode = T2.shortcode

SELECT T1.*
FROM instagram_content T1
INNER JOIN transkrib_insta T2 ON T1."video_url" = T2."Video_Url"


SELECT T2.*
FROM instagram_content T1
RIGHT JOIN transkrib_insta T2 ON T1.shortcode = T2.shortcode


select * from instagram_content

select * from transkrib_insta

select * from instagram_posts

create policy "Enable read access for Authenticated users for transkrib_insta table"
on "public"."transkrib_insta"
as PERMISSIVE
for SELECT
to authenticated
using (true)


create policy "Enable read access for Authenticated users for rizz_blogger table"
on "public"."rizz_blogger"
as PERMISSIVE
for SELECT
to anon, authenticated
using (true)

create policy "Enable read access for Authenticated users for Transkrib_TikTok table"
on "public"."Transkrib_TikTok"
as PERMISSIVE
for SELECT
to anon, authenticated
using (true)

create policy "Enable read access for Authenticated users for tiktok table"
on "public"."tiktok"
as PERMISSIVE
for SELECT
to anon, authenticated
using (true)


create policy "Enable read access for Authenticated users for YouTube Transkrib table"
on "public"."YouTube Transkrib"
as PERMISSIVE
for SELECT
to anon, authenticated
using (true)


create policy "Enable read access for Authenticated users for wjbloggers table"
on "public"."wjbloggers"
as PERMISSIVE
for SELECT
to anon, authenticated
using (true)



CREATE TABLE rt_Bloggers (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  email TEXT UNIQUE NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

INSERT INTO rt_Bloggers (name, email) 
VALUES ('Anton Sumin', 'apsumin@gmail.com');

select * from rt_Bloggers

CREATE TABLE rt_Subscribers (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  email TEXT UNIQUE NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

INSERT INTO rt_Subscribers (name, email) 
VALUES ('Anton Sumin', 'apsumin@gmail.com');


CREATE TABLE rt_Channels (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

INSERT INTO rt_Channels (name) 
VALUES ('YouTube');

INSERT INTO rt_Channels (name) 
VALUES ('TikTok');

INSERT INTO rt_Channels (name) 
VALUES ('Instagram');

select * from  rt_Channels

CREATE TABLE rt_Subscriptions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  bloggerID BIGINT REFERENCES rt_Bloggers(id) ON DELETE RESTRICT,
  subscriberID BIGINT REFERENCES rt_Subscribers(id) ON DELETE RESTRICT,
  channelID BIGINT REFERENCES rt_Channels(id) ON DELETE RESTRICT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

select * from rt_Subscriptions

INSERT INTO rt_Subscriptions (bloggerID, subscriberID, channelID) 
VALUES (1, 1, 1);

CREATE TABLE rt_VideoTranscribtion (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  bloggerID BIGINT REFERENCES rt_Bloggers(id) ON DELETE RESTRICT,
  channelID BIGINT REFERENCES rt_Channels(id) ON DELETE RESTRICT,
  channelVideoID TEXT,
  description TEXT,
  hashtags TEXT,
  title TEXT,
  url TEXT,
  text TEXT,
  is_vectorized BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  changed_at TIMESTAMPTZ DEFAULT NOW()
);

select * from rt_VideoTranscribtion

INSERT INTO rt_VideoTranscribtion (bloggerID, channelID, text) 
VALUES (1, 1, 'test');


drop table rt_VideoTranscribtion
drop table Subscriptions;
drop table Channels;
drop table subscribers;
drop table Bloggers;


select * from youtube




-- Create trigger function
CREATE OR REPLACE FUNCTION rt_track_youtube_adapter_changes()
RETURNS TRIGGER AS $$
DECLARE
  existed BOOLEAN;

BEGIN

   IF TG_OP = 'INSERT' THEN
    INSERT INTO rt_VideoTranscribtion (bloggerID, channelID, channelVideoID, url, title, description, hashtags, text) 
    VALUES (1, 1, NEW.video_id, NEW.url, NEW.title, NEW.description, NEW.hashtags, NEW.text);
    RETURN NEW;
  ELSIF TG_OP = 'UPDATE' THEN
     SELECT EXISTS (SELECT 1 FROM rt_VideoTranscribtion WHERE channelVideoID = NEW.video_id) INTO existed;
     IF existed THEN
       UPDATE 
       rt_VideoTranscribtion SET url=NEW.url, text=NEW.text, title=NEW.title, description=NEW.description,
       channelVideoID=NEW.video_id, changed_at=NOW() WHERE channelVideoID=OLD.video_id;
     ELSE
       INSERT INTO rt_VideoTranscribtion (bloggerID, channelID, channelVideoID, url, title, description, hashtags, text) 
       VALUES (1, 1, NEW.video_id, NEW.url, NEW.title, NEW.description, NEW.hashtags, NEW.text);
     
     END IF;
     RETURN NEW;
  END IF;
  RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- Create trigger
CREATE TRIGGER rt_trigger_youtube_adapter_changes
AFTER INSERT OR UPDATE ON youtube
FOR EACH ROW
EXECUTE FUNCTION rt_track_youtube_adapter_changes();

select text from rt_VideoTranscribtion
select * from rt_VideoTranscribtion order by id

DELETE FROM rt_VideoTranscribtion
update youtube set description='TEST' where internal_id=64

update youtube set description='TEST' where internal_id=73

update youtube where internal_id=73

update youtube set webhook_id = NULL


SELECT * FROM youtube

select * from transkrib_insta

-- Generate markdown table documentation
SELECT 
    '| ' || column_name || ' | ' || data_type || ' | ' || is_nullable || ' | ' || COALESCE(column_default, '') || ' |'
FROM information_schema.columns
WHERE table_name = 'Transkrib_TikTok'
ORDER BY ordinal_position;

select * from rt_channels

update transkrib_insta set changed_at=NOW()
update transkrib_insta set changed_at=NULL

-- Create trigger function
CREATE OR REPLACE FUNCTION rt_track_instagram_adapter_changes()
RETURNS TRIGGER AS $$
DECLARE
  existed BOOLEAN;
BEGIN
  IF TG_OP = 'INSERT' THEN
    INSERT INTO rt_VideoTranscribtion (bloggerID, channelID, channelVideoID, url, title, description, hashtags, text) 
        VALUES (1, 3, NEW.shortcode, NEW."Video_Url", '', '', '', NEW."Text");
    RETURN NEW;
  END IF;
  IF TG_OP = 'UPDATE' THEN
   SELECT EXISTS (SELECT 1 FROM rt_VideoTranscribtion WHERE channelVideoID = NEW.shortcode) INTO existed;
     IF existed THEN
        UPDATE 
        rt_VideoTranscribtion SET url=NEW."Video_Url", text=NEW."Text", channelVideoID=NEW.shortcode, changed_at=NOW() WHERE channelVideoID=OLD.shortcode;
      ELSE
        INSERT INTO rt_VideoTranscribtion (bloggerID, channelID, channelVideoID, url, title, description, hashtags, text) 
        VALUES (1, 3, NEW.shortcode, NEW."Video_Url", '', '', '', NEW."Text");
     END IF;
    RETURN NEW;
  END IF;
  RETURN NULL; -- Add this to handle other cases
END;
$$ LANGUAGE plpgsql;


select * from rt_VideoTranscribtion

-- Create trigger

CREATE TRIGGER rt_trigger_instagram_adapter_changes
AFTER INSERT OR UPDATE ON transkrib_insta
FOR EACH ROW
EXECUTE FUNCTION rt_track_instagram_adapter_changes();


ALTER TABLE transkrib_insta
ADD COLUMN changed_at TIMESTAMP;


CREATE OR REPLACE FUNCTION rt_track_tiktok_adapter_changes()
RETURNS TRIGGER AS $$
DECLARE
  existed BOOLEAN;
BEGIN
  IF TG_OP = 'INSERT' THEN
    INSERT INTO rt_VideoTranscribtion (bloggerID, channelID, channelVideoID, url, title, description, hashtags, text) 
    VALUES (1, 2, NEW."video_url", NEW."video_url", '', '', '', NEW."text");
    RETURN NEW;
  END IF;
  IF TG_OP = 'UPDATE' THEN
   SELECT EXISTS (SELECT 1 FROM rt_VideoTranscribtion WHERE channelVideoID = OLD."video_url") INTO existed;
     IF existed THEN
        UPDATE 
        rt_VideoTranscribtion SET channelVideoID= NEW."video_url", url=NEW."video_url", text=NEW."text", changed_at=NOW() WHERE channelVideoID=OLD."video_url";
      ELSE
    	INSERT INTO rt_VideoTranscribtion (bloggerID, channelID, channelVideoID, url, title, description, hashtags, text) 
      VALUES (1, 2, NEW."video_url", NEW."video_url", '', '', '', NEW."text");
      
      END IF;
    RETURN NEW;
  END IF;
  RETURN NULL; -- Add this to handle other cases
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER rt_trigger_tiktok_adapter_changes
AFTER INSERT OR UPDATE ON "Transkrib_TikTok"
FOR EACH ROW
EXECUTE FUNCTION rt_track_tiktok_adapter_changes();

select * from "Transkrib_TikTok"

update "Transkrib_TikTok" set text=NULL;
update transkrib_insta set changed_at=NOW();
update youtube set webhook_id = NULL;

select * from rt_VideoTranscribtion

select * from "Transkrib_TikTok" 
select * from transkrib_insta 
select * from youtube

select * from getblogger
select * from rizz_blogger
select * from wjbloggers

select * from rt_bloggers



ALTER TABLE transkrib_insta
ADD COLUMN changed_at TIMESTAMP;