| column_name      | data_type                |
| ---------------- | ------------------------ |
| id               | bigint                   |
| userid           | bigint                   |
| channelid        | bigint                   |
| channelvideoid   | bigint                   |
| description      | text                     |
| hashtags         | text                     |
| title            | text                     |
| url              | text                     |
| text             | text                     |
| is_vectorized    | boolean                  |
| created_at       | timestamp with time zone |
| changed_at       | timestamp with time zone |
| is_vectorized_v2 | boolean                  |

| published_at         | timestamp without time zone |
| duration             | interval                    |
| views                | integer                     |
| likes                | integer                     |
| comments_count       | integer                     |
| links_in_description | jsonb                       |
| channel_name         | text                        |
| channel_url          | text                        |
| channel_id           | text                        |
| channel_username     | text                        |
| channel_description  | text                        |
| channel_created_at   | date                        |
| channel_subscribers  | integer                     |
| channel_videos_count | integer                     |
| channel_total_views  | bigint                      |

CREATE TABLE rt_VideoTranscribtion (
  id 			BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  userID 		BIGINT REFERENCES rt_Users(id) ON DELETE RESTRICT,
  channelID 		BIGINT REFERENCES rt_Channels(id) ON DELETE RESTRICT,
  channelVideoID 	BIGINT,
  description 		TEXT,
  hashtags 		TEXT,
  title 		TEXT,
  url 			TEXT,
  text 			TEXT,
  is_vectorized 	BOOLEAN DEFAULT FALSE,
  is_vectorized_v2 	BOOLEAN DEFAULT FALSE,
  created_at 		TIMESTAMPTZ DEFAULT NOW(),
  changed_at 		TIMESTAMPTZ DEFAULT NOW()
);






	ID 4 APP USER

		Social Network
	
				Account
					
					Content

	bloggerid --> userid


| hashtags             | ARRAY                       |
| published_at         | timestamp without time zone |
| duration             | interval                    |
| views                | integer                     |
| likes                | integer                     |
| comments_count       | integer                     |
| links_in_description | jsonb                       |
| channel_name         | text                        |
| channel_url          | text                        |
| channel_id           | text                        |
| channel_username     | text                        |
| channel_description  | text                        |
| channel_created_at   | date                        |
| channel_subscribers  | integer                     |
| channel_videos_count | integer                     |
| channel_total_views  | bigint                      |
| Transcrib            | text                        |




CREATE TABLE rt_videotranscription_v2 (

  id 			BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  userid 		BIGINT REFERENCES rt_Users(id) ON DELETE RESTRICT,
  channelid 		BIGINT REFERENCES rt_Channels(id) ON DELETE RESTRICT,
  channelvideoid 	BIGINT,
  description 		TEXT,
  hashtags 		TEXT,
  title 		TEXT,
  url 			TEXT,
  text 			TEXT,

  published_at 		TIMESTAMPTZ DEFAULT NOW(),
  duration		INTERVAL,
  views			INTEGER,
  likes			INTEGER,
  comments_count	INTEGER,
  links_in_description  jsonb,  
  channel_name		TEXT,
  channel_url		TEXT,
  channel_id		TEXT,

  channel_username      TEXT,                        
  channel_description   TEXT,                        
  channel_created_at    DATE,                       
  channel_subscribers   INTEGER,                     
  channel_videos_count  INTEGER,                     
  channel_total_views   BIGINT,                     
  is_vectorized 	BOOLEAN DEFAULT FALSE,
  is_vectorized_v2 	BOOLEAN DEFAULT FALSE,
  created_at 		TIMESTAMPTZ DEFAULT NOW(),
  changed_at 		TIMESTAMPTZ DEFAULT NOW()
);


-- Create trigger
CREATE OR REPLACE TRIGGER rt_trigger_youtube_adapter_changes_v2
AFTER INSERT OR UPDATE ON youtube
FOR EACH ROW
EXECUTE FUNCTION rt_track_youtube_adapter_changes_v2();




09/04/2025. v1.1. good version.


CREATE OR REPLACE FUNCTION  rt_track_youtube_adapter_changes_v2()
RETURNS TRIGGER AS $$
DECLARE
  existed BOOLEAN;
  channel BIGINT;
BEGIN
   channel=1;
   IF TG_OP = 'INSERT' THEN

        INSERT INTO rt_videotranscription_v2 (userid, channelid, channelvideoid, url, title, description, hashtags, text,

	          published_at,duration,views,likes,comments_count,links_in_description,channel_name,		
        	  channel_url,channel_id,channel_username,
	          channel_description,channel_created_at,channel_created_at,                     
        	  channel_subscribers,channel_videos_count,channel_total_views                        

        ) 
        VALUES (1, channel, NEW.internal_id, NEW.url, NEW.title, NEW.description, NEW.hashtags, NEW."Transcrib",

	            NEW.published_at,NEW.duration,NEW.views,NEW.likes,NEW.comments_count,NEW.links_in_description,NEW.channel_name,		
        	    NEW.channel_url,NEW.channel_id,NEW.channel_username,
	            NEW.channel_description,NEW.channel_created_at,NEW.channel_created_at,                     
	            NEW.channel_subscribers,NEW.channel_videos_count,NEW.channel_total_views
        );                        

        RETURN NEW;
   ELSIF TG_OP = 'UPDATE' THEN
        SELECT EXISTS (SELECT 1 FROM rt_videotranscription_v2 WHERE channelid=channel AND channelvideoid = NEW.internal_id) INTO existed;
        IF existed THEN

	      	 UPDATE 

		       	 rt_videotranscription_v2 

		 SET 
			url=NEW.url, text=NEW."Transcrib", title=NEW.title, description=NEW.description,
	       		is_vectorized=false, is_vectorized_v2=false, changed_at=NOW(), 
			published_at=NEW.published_at,duration=NEW.duration,views=NEW.views,likes=NEW.likes,
			comments_count=NEW.comments_count,links_in_description=NEW.links_in_description,
		        channel_name=NEW.channel_name,		
		        channel_url=NEW.channel_url,channel_id=NEW.channel_id,channel_username=NEW.channel_username,
		        channel_description=NEW.channel_description,		        
			channel_created_at=NEW.channel_created_at,                     
		        channel_subscribers=NEW.channel_subscribers,channel_videos_count=NEW.channel_videos_count,
		        channel_total_views=NEW.channel_total_views                        

	      WHERE 
            		channelvideoid=NEW.internal_id AND channelid=channel;

     	ELSE

        INSERT INTO rt_videotranscription_v2 (userid, channelid, channelvideoid, url, title, description, hashtags, text,

          published_at,duration,views,likes,comments_count,links_in_description,channel_name,		
          channel_url,channel_id,channel_username,
          channel_description,channel_created_at,channel_created_at,                     
          channel_subscribers,channel_videos_count,channel_total_views                        
        ) 
        VALUES (1, channel, NEW.internal_id, NEW.url, NEW.title, NEW.description, NEW.hashtags, NEW."Transcrib",
          NEW.published_at,NEW.duration,NEW.views,NEW.likes,NEW.comments_count,NEW.links_in_description,NEW.channel_name,		
          NEW.channel_url,NEW.channel_id,NEW.channel_username,
          NEW.channel_description,NEW.channel_created_at,                    
          NEW.channel_subscribers,NEW.channel_videos_count,NEW.channel_total_views
        );                        
     
     END IF;
     RETURN NEW;
  END IF;
  RETURN NULL;
END;
$$ LANGUAGE plpgsql;






























  published_at 		
  duration		  
  views			
  likes			
  comments_count	
  links_in_description   
  channel_name		
  channel_url		
  channel_id		

  channel_username                              
  channel_description                           
  channel_created_at                           
  channel_subscribers                        
  channel_videos_count                       
  channel_total_views                        


  published_at,duration,views,likes,comments_count,links_in_description,channel_name,		
  channel_url,channel_id,channel_username,
  channel_description,channel_created_at,channel_created_at                     
  channel_subscribers,channel_videos_count,channel_total_views                        







--reload table
update youtube set webhook_id=null
		
